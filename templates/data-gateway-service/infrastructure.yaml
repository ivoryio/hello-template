AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  ProjectName:
    Type: String
    
  Environment:
    Type: String
    AllowedValues: # Changing one of these values require change in multiple places!
      - 'development'
      - 'staging'
      - 'production'

Resources:
  LoggingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-data-gateway-logging-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs

  InvokeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allow-access-to-lambda-from-appsync
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:invokeFunction
                Resource:
                  - !Sub '{{resolve:ssm:${ProjectName}-greeter-graphql-resolver-${Environment}:1}}'

  GraphQLAPI:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub '${ProjectName}-data-gateway-graphqlapi-${Environment}'
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        AwsRegion: !Sub ${AWS::Region}
        DefaultAction: 'ALLOW'
        UserPoolId: !Sub '{{resolve:ssm:${ProjectName}-user-service-pool-id-${Environment}:1}}'

  GraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLAPI.ApiId
      Definition: |
        type Greeting {
          text: String!,
          id: ID!
        }
        type Query {
          greeting(name: String!): Greeting!
        }
        type Mutation {
          addGreeting(text: String!): Greeting!
        }

  GreeterDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: !Sub '${ProjectName}_data_gateway_datasource_${Environment}'
      ApiId: !GetAtt GraphQLAPI.ApiId
      LambdaConfig:
        LambdaFunctionArn: !Sub '{{resolve:ssm:${ProjectName}-greeter-graphql-resolver-${Environment}:1}}'
      ServiceRoleArn: !GetAtt InvokeLambdaRole.Arn
      Type: AWS_LAMBDA

  GreetingResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLAPI.ApiId
      DataSourceName: !GetAtt GreeterDataSource.Name
      TypeName: Query
      FieldName: greeting
      RequestMappingTemplate: |
        { 
          "version": "2017-02-28", 
          "operation": "Invoke", 
          "payload": { 
            "field": "greeting",
            "arguments": $utils.toJson($context.args)}
        }
      ResponseMappingTemplate: $utils.toJson($context.result)

  AddGreetingResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLAPI.ApiId
      DataSourceName: !GetAtt GreeterDataSource.Name
      TypeName: Mutation
      FieldName: addGreeting
      RequestMappingTemplate: |
        { 
          "version": "2017-02-28", 
          "operation": "Invoke", 
          "payload": { 
            "field": "addGreeting",
            "arguments": $utils.toJson($context.args)}
        }
      ResponseMappingTemplate: $utils.toJson($context.result)

  GraphQLAPIUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${ProjectName}-data-gateway-url-${Environment}'
      Type: String
      Value: !GetAtt GraphQLAPI.GraphQLUrl
      Description:
        !Sub 'The ${ProjectName} GraphQLUrl for the data-gateway to be used in ${Environment}'
